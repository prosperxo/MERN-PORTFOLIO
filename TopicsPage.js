import React from 'react';


function TopicsPage() {
   return (
      <>
         <h2>Web Development Concepts</h2>
         <nav className="local">
            <a href="#webServers">Web Servers</a>
            <a href="#frontend">Frontend Design</a>
            <a href="#imageOptimization">Images</a>
            <a href="#faviconInformation">Favicons</a>
            <a href="#cascadingStyleSheets">CSS</a>
            <a href="#forms">Forms</a>
            <a href="#express">Express</a>
            <a href="#javascript">JavaScript</a>
         </nav>

         <article id="webServers">
            <h3>Web Servers</h3>
            <p>In short, a <strong>designated home page</strong> is the default page when someone visits the website or opens a browser. In other words, it is the first page a visitor sees when navigating a site, and it usually refers to the file in the root directory. Traditionally, this page will provide an introduction to the website's content and serve as an entry point for the user to see the general contents of the website while providing the option for further exploration. Moreover, the name of the designated home page is often related to different servers and programming languages because of different configurations established by those systems. For instance, servers like <strong>Apache</strong> look for files named "index.html" or "index.php" or other index files in configuration. As for programming languages, they have their own conventions for naming the home page, such as <strong>PHP</strong> usually using "index.php," in <strong>Django</strong> it is usually "home.html" or "index.html," and in <strong>Ruby on Rails</strong>, the home page could be named "home.html.erb" or "index.html.erb" to indicate it is embedded. All in all, the name of the designated home page is related to different servers and programming languages because of the conventions, configurations, and defaults established by those technologies, usually reflecting the naming conventions and expectations of that server software and programming languages used in web development.</p>
                <p>In the browser's <strong>Web Dev/Inspector Network Tab</strong>, there is a plethora of tools where the user may see a detailed overview of network activity related to loading the webpage. What a user can typically observe is: <strong>requests, URL, HTTP method, status code, type, size, timeline, initiator, headers, and previews.</strong> All of these tools allow the user to analyze network activity, identify performance issues, debug code, optimize the website, and ensure proper resource caching and delivery. For instance, both the local computer and the web server may see the <strong>request method, status code, and remote address.</strong> The key difference between a file's details when viewed from the web server versus the local computer is the available metadata, path representation, and file display mechanism. Specifically, the file's details when viewed from the web server have more information such as favicon.io, style.css, and JavaScript files, whereas the local computer only has the index.html file. There are also a lot of differences in the headers section of the available data types such as the web server allowing for more information on cache-control, access-control-allow-origin, etag, etc. Essentially, the web server has a lot more information compared to the local computer.</p>
                <p>Favicon.io is a file used to display small icons next to the website's name in the browser tab. As a result, <strong>status code reference</strong> 200-299 is used for when a request was successfully processed by the server. Specifically, status code 200 means the request succeeded and the response body has the needed information. On the other hand, the main.css and main.js are stylesheets for styling the HTML content, where .css is <strong>cascading style sheets</strong> and .js is <strong>JavaScript</strong>. As a result, the status code reference in 400-499 means there is a client error. A status code of 404 means the requested resource is not found on the server.</p>
                <p>The first part of the <strong>URL</strong> is the <strong>scheme</strong>, which can be seen as "https://" where HTTPS encrypts data between the client and the server. It identifies the protocol the web client must use to request the resource and is usually followed by a colon. The next part is the <strong>server name</strong>, which is preceded by two slashes "//" and could be split up into a <strong>subdomain</strong> and <strong>host domain</strong>. The subdomain is a subsection of the host domain, and its name is usually in front of the host domain; in this example, it is the "web" and "engr" part of the URL. The host domain in this case would be "oregonstate.edu" and is used to identify the specific website or web service. The domain name is mapped to the IP address for the server machine. Finally, the <strong>resource</strong> in this URL is the "~ONIDusername" or my username "votr", which represents the <strong>path to the resource</strong> being accessed on the server. As the name suggests, it represents the resource being accessed on the server.</p>
         </article>
         
         <article id="frontend">
                <h3>Frontend Design</h3>
                <p>The concept of <strong>frontend design</strong> stems from making a visual and interactive web application for users. This can be done through graphics, interactive experiences, color scheme, font, and navigation system. <strong>Usability</strong> and <strong>inclusivity</strong>, is integral to effective frontend design and can be seen as the measure of the quality of a user's experience when interacting with a product or system. Usability can be described within the <strong>Five E's</strong> which will be explained later on. In short, frontend design extends beyond aesthetics; it involves ensuring seamless user interaction such as designing buttons, links, menus, etc. Overall, frontend design encapsulates the creative and technical process of shaping the visual and interactive aspects of websites, ultimately aiming to deliver an engaging and user-friendly experience. Here are the Five E's:</p>
                <d1>
                    <dt><strong>Effective</strong></dt>
                    <dd>The first of five E's of usability is effective. This is the concept of frontend design, where the web page helps users meet their goals. For instance, if the user wants to buy clothes, the web page will make it an easier experience for the user to shop around.</dd>
                    <dt><strong>Efficient</strong></dt>
                    <dd> The second of five E's of usability is efficiency. This is where users may achieve their goal in the least amount of steps possible. In the case of wanting to buy clothes, if the user finds a clothing he or she likes, the user is able to directly buy it within a click or add it to a cart.</dd>
                    <dt><strong>Easy to Navigate</strong></dt>
                    <dd>The third of five E's of usability is if the site is easy to navigate. In other words, is the site intuitive for users who have never accessed it before. For instance, the user who has never been on the website before should be able to look at much different clothing, add it to a cart, and buy the item without much instruction.</dd>
                    <dt><strong>Error-free</strong></dt>
                    <dd>The fourth of five E's of usability is error-free. As the name suggests, does the web server avoid accessibility and availability issues. When the user is accessing the site, there are no errors, bugs, or glitches and the process is seamless.</dd>
                    <dt><strong>Enjoyable/Engaging</strong></dt>
                    <dd>The final of five E's is if the web server is enjoyable or engaging. The web server should fit the unique needs of the intended audience in both content and design. In the case of a shopping experience, the user could have achievement badges or a unique way to shop for clothing.</dd>
                </d1>
                <p>The purpose of each page layout tag, including <strong>&lt;header&gt;</strong>, <strong>&lt;nav&gt;</strong>, <strong>&lt;section&gt;</strong>, <strong>&lt;article&gt;</strong>, <strong>&lt;main&gt;</strong>, and <strong>&lt;footer&gt;</strong>, is to provide structure and organization to the content of a webpage, facilitating its presentation and navigation. In short, &lt;header&gt; is used to denote the banner or masthead for a site, which could include the name, publisher, or marketing slogan while remaining the same from page-to-page. Next, &lt;nav&gt; is used when each block of navigation takes users from current pages to other pages such as in main menu, search, tools, stories, locations, and legal links. The &lt;section&gt; is used to represent a thematic grouping of content or when dividing content. It is typically paired with a heading. The &lt;article&gt; is usually used inside a &lt;section&gt; and denotes a single specific topic with a second-level heading. Next, &lt;main&gt; is used to denote the primary block that holds contents such as stories, galleries and tutorials, etc. Finally, &lt;footer&gt; is used to hold legal information, contact information, and links to critical pages. In the very least, the &lt;footer&gt; should contain the website owner's copyright statement and copyright symbol.</p>
                <ol>
                    <li>With anchors, engineers are able to create hyperlinks from one item to another. There are multiple types of anchors that may be used. <strong>External anchor</strong> allows  the engineer to link users to external content. In this case, we would use &lt;a&gt; anchor tag with the “href” attribute to specify the URL of the external page. The content between the opening and closing &lt;a&gt; tags describes the link where the user will be navigating to.</li>
                    <li>An <strong>internal anchors</strong> allows links from one text item to another text item within the same page. When using tags as an ID attribute, its value can be used in conjunction with a hashtag to define the reference for another anchor.</li>
                    <li><strong>Page-to-Page anchors</strong> can be seen as decorative and noticeable button-like anchors allowing users to move from page to page within the same website. They are commonly used for navigation purposes, enabling users to easily navigate between different sections or pages of a website. In this case, one would use the “href” attribute with either a relative or absolute URL of the target page. <strong>Absolute URLs</strong> are used when linking to pages on external websites or resources located on different domains, while <strong>relative URLs</strong> are used to link to pages within the same website or directory structure.</li>
                </ol>
         </article>
         <article id="images">
                <h3>Optimizing Images</h3>
                <article id="imageOptimization"></article>
                <p>The six major image optimizing specifications are essential for enhancing website performance, improving user experience, and ensuring effective search engine optimization (SEO). Firstly, employing <strong>descriptive file names</strong> that include relevant keywords helps search engine bots categorize and index images accurately, making them more discoverable to users. Secondly, <strong>small file sizes</strong> are crucial for faster load times, achieved by serving high-resolution images only to capable devices and using techniques like <strong>“srcset”</strong> and <strong>“sizes”</strong> attributes. Cropping and resizing images to match <strong>exact dimensions</strong> required for their display space on web pages is vital to optimize load times and avoid unnecessary bandwidth usage. Additionally, <strong>correct file format</strong> selecting the based on image content and desired features is crucial for optimizing file size and visual quality, with JPEGs typically used for photographs and PNGs for line art or logos. Providing <strong>reduced resolution</strong> images to accommodate different screen resolutions ensures optimal display quality across various devices, while choosing the appropriate <strong>color mode</strong> ensures accurate representation and optimal file size. These specifications collectively aim to streamline image delivery, improving website performance and user satisfaction, while enhancing search engine visibility.</p>
                <p>For photographs, the preferred file formats for web use are <strong>JPEG (.JPG)</strong> and <strong>WebP</strong> due to their efficient compression and ability to maintain high quality for images with millions of colors and intricate details. JPEG files are widely used for photographic images, while WebP offers smaller file sizes with transparent backgrounds. For <strong>line art</strong> and graphics, <strong>GIF (.GIF), PNG (.PNG), and SVG (Scalable Vector Graphics)</strong> are commonly utilized. GIF files support transparency and animations, while PNG files, especially those with true transparency, are suitable for line art and solid colors. SVG files, marked with XML, offer crisp text and scalable graphics, making them ideal for interactive or animated images on the web. Each format has specific strengths, allowing web designers to choose based on the content and requirements of their images.</p>
            </article>
            <article id="favicons">
                <h3>Favicons</h3>
                <article id="faviconInformation">
                    <p><strong>Favicons</strong>, also referred to as favorite icons or touch icons, are small graphical symbols associated with a website, commonly available in formats such as .GIF, .PNG, .ICO, and .SVG. They serve a variety of purposes across different platforms and devices. In browsers, favicons are prominently displayed on tabs, allowing users to quickly identify and distinguish between open websites. Additionally, they may appear on bookmarks and in browsing history entries, aiding in site recognition. On mobile devices like smartphones and smartwatches, favicons often serve as app icons when a website is added to the home screen or installed as a Progressive Web App (PWA). Furthermore, some search engines display favicons alongside search results, enhancing visual recognition. Browsers typically search for a favicon.ico file in the root directory of a website to retrieve these visual assets, ensuring consistent branding and user experience across various platforms and contexts within web browsing. </p>
                </article>
            </article>
            <article id="css">
                <h3>CSS</h3>
                <article id="cascadingStyleSheets">
                    <p>Incorporating <strong>stylesheets</strong> into websites and apps serves multiple purposes. Firstly, it ensures consistency in visual presentation and offers users an intuitive experience across all pages. Secondly, stylesheets streamline the development by separating the HTML and CSS structure, enhancing productivity and efficiency. In turn, this promotes maintainability by facilitating easy updates to visual appearances without modifying content. Additionally, stylesheets support scalability through a structured approach for large projects, ensuring organization and consistency. Finally, external stylesheets can enhance performance by enabling browser caching and optimizing code, resulting in faster load times.</p>
                    <p>The five ways to incorporate styles into webpages are: <strong>external CSS, imported CSS, embedded CSS, inline CSS, and JavaScript DOM manipulation</strong>. In short, external CSS involves defining styles in separate CSS files with a “.css” extension, linking them to HTML pages with “&lt;link&gt;” tag in the head section. Imported CSS is a type of stylesheet which can be imported within another CSS file using the import rule, allowing for modularization of styles. Next, embedded CSS can be directly embedded within the HTML files themselves using “&lt;style&gt;” tag in the head or body sections. Inline CSS can be applied directly to individual HTML elements with the “style” attribute. Finally, JavaScript DOM manipulation are dynamically applied or modified using JavaScript by accessing and manipulating <strong>Document Object Model (DOM)</strong>. All these methods offer different levels of flexibility, efficiency, and maintainability based on the required specifics of the project. Typically, external CSS files are more efficient and preferred for larger projects, whereas inline styles and JavaScript DOM manipulation are for smaller projects or one-off style changes. </p>
                </article>
            </article>
            <article id="forms">
                <h3>Forms</h3>
                <article id="formConcepts">
                    <p>The main objectives of developing accessible forms are to improve usability and inclusivity for all users. These objectives involve offering <strong>clear instructions</strong> above the form and within the labels to aid users in understanding the purpose of each field, particularly for those who depend on screen readers. It is essential to explain the reason for <strong>collecting data</strong> and <strong>identify which fields are mandatory</strong>, ensuring transparency and guiding users through the form completion process. By making the first field <strong>autofocus</strong>, users can promptly begin entering information without requiring a mouse, which enhances efficiency and accessibility. Moreover, ensuring that <strong>all form controls can be filled in using the keyboard</strong> accommodates users who may struggle with using a mouse or trackpad. <strong>Tab indexing</strong> is utilized in intricate forms to establish a logical order in which fields should be completed, simplifying navigation and comprehension for all users. Lastly, <strong>ensuring that validation messages are screen-readable</strong> is crucial for effectively communicating errors or necessary corrections, as the default HTML browser messages may not be accessible to all users. In conclusion, these six objectives strive to create forms that are user-friendly, intuitive, and accessible to individuals of all abilities.</p>
                    <p>
                        Crafting user-friendly web forms hinges on mastering HTML form elements and adhering to best practices. Usability and accessibility are paramount, ensuring that users can navigate and submit data effortlessly. Employing <strong>&lt;form&gt;</strong>, <strong>&lt;fieldset&gt;</strong>, and <strong>&lt;legend&gt;</strong> aids in structuring forms logically, while <strong>&lt;label&gt;</strong> tags provide context and enhance accessibility. Input types like <strong>&lt;input&gt;</strong>, <strong>&lt;textarea&gt;</strong>, and <strong>&lt;button&gt;</strong> offer versatile options for data input and submission actions. Attributes such as <strong>"required"</strong> and <strong>"for"</strong> bolster form validation and usability. By prioritizing clear instructions, keyboard accessibility, and screen-readable validation messages, developers can create forms that cater to users of all abilities, fostering a seamless user experience.
                    </p>
                    <p>
                        When creating forms, it is essential to prioritize usability in order to enhance the user experience. Some key suggestions include utilizing <strong>field set</strong> and <strong>legend</strong> elements to group related form controls and establish a clear, semantic structure. Employ <strong>Label</strong> elements for each form control to enhance accessibility and usability, particularly for screen readers. Select appropriate <strong>input types</strong> to align with the expected data format, such as email, number, date, etc., to offer a more seamless user experience and enable client-side validation. Customize the <strong>:focus</strong> pseudo-class to indicate when a form control is in focus, improving visual feedback and accessibility. Utilize the <strong>:required</strong>, <strong>:valid</strong>, and <strong>:invalid</strong> pseudo-classes to visually represent required fields and validation status, aiding users in understanding form completion requirements. Personalize <strong>::placeholder</strong> styles to provide context and instructions within form fields, enhancing usability and guiding user input. Implement styles to distinguish between <strong>:disabled</strong> and <strong>:enabled</strong> form controls, offering clear visual cues regarding interactivity. By incorporating these suggestions, not only will the usability of forms be enhanced, but accessibility, user satisfaction, and completion rates will also improve, ultimately resulting in an enhanced overall user experience. 
                    </p>
                </article>
            </article>
            <article id="express">
                <h3>Node, npm, and Express</h3>
                <p>
                    <strong>Node.js</strong> is a versatile open-source runtime environment that allows for the development of server-side and networking applications. It is compatible with MacOS, Microsoft Windows, and Linux systems. JavaScript is used to create applications within Node.js, taking advantage of its extensive library of modules to simplify web development. Node.js is an essential component of our web development toolkit, enabling us to create robust applications efficiently. <strong>Express.js</strong>, also known as Express, is a widely adopted framework for building web applications on top of Node.js. It provides an intuitive API for essential web application tasks, such as data retrieval, submission, and deletion. Express also allows us to define routes and ports, serve static files, generate dynamic responses using templates, and streamline request handling through middleware. By utilizing Node.js and Express, we can develop scalable and feature-rich web applications, enhancing our overall development experience. Lastly, <strong>npm</strong> (Node Package Manager) is a crucial tool that enables developers to efficiently manage dependencies. It simplifies the installation, updating, and removal of packages.
                </p>
            </article>
            <article id="javascript">
                <h2>JavaScript</h2>
                <p>The primary data types in JavaScript are <strong>object, boolean, number, string, symbol, undefined, and null</strong>. A number can be either an integer or a floating-point number, and it represents numerical quantities. Booleans are logical values that have two possible states: true and false. A string is a series of characters surrounded by backticks, single quotes, or double quotes. Symbols are distinct and unchangeable data types that are frequently used as property identifiers for objects. Null denotes the deliberate absence of any value, whereas undefined denotes a variable that has been declared but not assigned a value. Complex data types called objects can hold groups of key-value pairs, functions, and other types of things. Every data type has a unique function and gives programmers the freedom to work with and store various types of data within.</p>
                <p><strong>Objects, arrays, and JSON</strong> are used in JavaScript for organizing, manipulating, and exchanging structured data within web applications. JavaScript objects, being the only non-primitive type, allow for the creation of structured collections of key-value pairs, where properties can hold various data types, including other objects or arrays. Objects enable the organization and representation of complex data structures in JavaScript, crucial for modeling real-world entities and interacting with the DOM in web development. Arrays, on the other hand, serve as ordered lists of elements, accessible by index or string-based property names. Arrays are versatile tools for storing and manipulating collections of data, supporting various operations such as addition, deletion, and modification of elements. Lastly, we explored JSON, a universal data interchange format widely used for transmitting structured data between web applications. JSON provides a language-independent means of representing and exchanging data, leveraging the serialization and deserialization capabilities of JavaScript's <strong>JSON.stringify() and JSON.parse()</strong> methods.</p>
                <p>In JavaScript, <strong>conditionals and loops</strong> play crucial roles in controlling program flow and iterating through data. Conditionals, such as <strong>if and switch statements</strong>, allow developers to make decisions based on certain conditions, while loops like <strong>while, do-while, and for</strong> facilitate repetitive execution of code blocks. However, JavaScript's automatic type conversion and <strong>"loose equality" operators</strong> necessitate careful attention when evaluating conditions to avoid unexpected behavior. This is why it is highly recommended to use <strong>strict equality operators</strong>, which checks two data types are equal and of the same data type. Therefore, understanding how to construct conditions effectively is essential for writing reliable JavaScript code.</p>
                <p>In JavaScript, objects are fundamental entities expected to possess <strong>identity, state, and behavior</strong>. While traditional <strong>object-oriented programming</strong> languages typically require class declaration before object instantiation, JavaScript offers flexibility by enabling object creation without explicit class definition. However, modern JavaScript introduces class syntax similar to other languages. Objects in JavaScript consist of <strong>name-value pairs</strong> representing properties, allowing addition, modification, reading, and deletion of properties. Additionally, <strong>prototypes</strong>, an integral concept in JavaScript, are explored for creating objects with shared properties. By defining prototypes with common function-valued properties and utilizing functions to create objects with designated properties, developers can leverage modern JavaScript features while understanding the significance of prototypes. Object orientated programming underscores the importance of comprehending prototypes while advocating for the adoption of modern syntax for constructors and methods.</p>
                <p><strong>Functional programming</strong> is a paradigm where functions play a central role in software development. In JavaScript, functions are considered <strong>"first-class"</strong> values, meaning they can be assigned to variables, passed as arguments to other functions, and returned as values from other functions. This powerful feature enables the creation of <strong>higher-order functions</strong>, which are functions that accept other functions as arguments. These higher-order functions can then operate on data in various ways, enhancing code modularity and flexibility. For instance, functions like <strong>ourMap</strong> can be defined to apply a given function to every element of an array, showcasing the concept of higher-order functions in action. Additionally, JavaScript provides built-in higher-order functions like <strong>map()</strong>, which further simplifies common operations on data structures. Moreover, functional programming in JavaScript extends to handling function arguments, specifying default values, and managing exceptions using <strong>try, catch, and finally blocks</strong>. Overall, understanding functional programming principles is essential for modern JavaScript developers, as it facilitates the creation of more concise, modular, and maintainable code.</p>
            </article>
      </>
   );
}

export default TopicsPage;
